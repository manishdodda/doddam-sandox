name: Common Component Maker

on:
  workflow_dispatch:
    inputs:
      projectName:
        description: 'Project Name to be provided'
        required: false
      databaseName:
        description: 'Database Name should be provided'
        required: true
      schemaName:
        description: 'Schema Name should be provided'
        required: true
      userName:
        description: 'Username should be provided'
        required: true
      branchName:
        description: 'Name of the new branch. It should start with "feature" and not be "main".'
        required: true

jobs:
  create_and_replace:
    runs-on: ubuntu-latest
    steps:
      - name: Check branch name format and existence
        run: |
          if [[ "${{ github.event.inputs.branchName }}" == "main" ]]; then
            echo "Branch name cannot be 'main', please provide a different name."
            exit 1
          elif [[ ! "${{ github.event.inputs.branchName }}" =~ ^feature.* ]]; then
            echo "Branch name should start with 'feature', please provide a different name."
            exit 1
          fi

      - name: Checkout main branch
        uses: actions/checkout@v2
        with:
          ref: 'main'

      - name: Check if branch exists
        id: check_branch
        run: |
          git fetch --all
          if git rev-parse --verify --quiet refs/remotes/origin/${{ github.event.inputs.branchName }}; then
            echo "Error: Branch already exists."
            exit 1
          fi
  
      - name: Create branch
        run: |
          git checkout -b ${{ github.event.inputs.branchName }}

      - name: Perform string replacement
        run: |
          echo "Replacing the content inside files"
          if [ -z "${{ github.event.inputs.projectName }}" ]; then
            echo "projectName is empty"
            # Execute your command here if the variable is not present
            find db_scripts/changelogs -type f -name "*.*" -print0 | xargs -0 sed -i  "s/k_project_name_//g"
            find db_scripts/changelogs -type f | while read -r file; do
              # Check if the file name contains the old string
              if [[ "$file" == *"k_project_name"* ]]; then
                  # Replace the k_project_name with the new project name
                  new_name=$(echo "$file" | sed "s/k_project_name_//")
                  mv "$file" "$new_name"
              fi
            done
          else
            find db_scripts/changelogs -type f -name "*.*" -print0 | xargs -0 sed -i  "s/k_project_name/${{ github.event.inputs.projectName }}/g"
            find db_scripts/changelogs -type f | while read -r file; do
              # Check if the file name contains the old string
              if [[ "$file" == *"k_project_name"* ]]; then
                  # Replace the k_project_name with the new project name
                  new_name=$(echo "$file" | sed "s/k_project_name/${{ github.event.inputs.projectName }}/")
                  mv "$file" "$new_name"
              fi
            done
          fi
          find db_scripts/changelogs -type f -name "*.*" -print0 | xargs -0 sed -i  "s/k_database_name/${{ github.event.inputs.databaseName }}/g"
          find db_scripts/changelogs -type f -name "*.*" -print0 | xargs -0 sed -i  "s/k_schema_name/${{ github.event.inputs.schemaName }}/g"
          find db_scripts/changelogs -type f -name "*.*" -print0 | xargs -0 sed -i  "s/k_user/${{ github.event.inputs.userName }}/g"

      - name: Push changes to new branch
        run: |
          git config --global user.email "manish.dodda@pfizer.com"
          git config --global user.name "manishdodda"
          git add .
          git commit -m "Replacement of Strings executed"
          git push origin ${{ github.event.inputs.branchName }}
